import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minimumNumber' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING password
     */

    public static int minimumNumber(int n, String password) {
    // Return the minimum number of characters to make the password strong
    //     int minNoToAdd=0;
    //     minNoToAdd = Math.max(0,n - password.length()) 
    //                     +   (password.matches(".*[A-Z].*") ? 0 : 1) 
    //                     +   (password.matches(".*[a-z].*") ? 0 : 1)
    //                     +   (password.matches(".*[0-9].*") ? 0 : 1)
    //                     +   (password.matches(".*[!@#$%^&*()-+].*") ? 0 : 1);
    
    // return minNoToAdd;
    
    int cnt=0;
    
    if(n > password.length())
        cnt = n - password.length();
    
    String numbers = "0123456789";
    String lower_case = "abcdefghijklmnopqrstuvwxyz";
    String upper_case = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String special_characters = "!@#$%^&*()-+";
    
    int minCharToAdd = 0;
    
    for(char c : password.toCharArray())
    {
        if(!c.contains(numbers))
            minCharToAdd++;
    }
    if(!password.matches(numbers))
        minCharToAdd++;
    if(!password.matches(lower_case))
        minCharToAdd++;
    if(!password.matches(upper_case))
        minCharToAdd++;
    if(!password.matches(special_characters))
        minCharToAdd++;
        
    cnt = Math.max(cnt, minCharToAdd);
    
    return cnt;
        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String password = bufferedReader.readLine();

        int answer = Result.minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

